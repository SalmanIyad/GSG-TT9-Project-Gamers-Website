{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\nvar e = function (i, e, t) {\n    if (i && \"reportValidity\" in i) {\n      var f = r(t, e);\n      i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n    }\n  },\n  t = function (r, i) {\n    var t = function (t) {\n      var f = i.fields[t];\n      f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, t, r) : f.refs && f.refs.forEach(function (i) {\n        return e(i, t, r);\n      });\n    };\n    for (var f in i.fields) t(f);\n  },\n  f = function (e, f) {\n    f.shouldUseNativeValidation && t(e, f);\n    var o = {};\n    for (var a in e) {\n      var n = r(f.fields, a);\n      i(o, a, Object.assign(e[a] || {}, {\n        ref: n && n.ref\n      }));\n    }\n    return o;\n  };\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"names":["e","setCustomValidity","i","t","f","r","message","reportValidity","validateFieldsNatively","fields","ref","refs","forEach","toNestError","shouldUseNativeValidation","o","a","n","Object","assign"],"sources":["/home/salman/APPS/Tasks/gsg-tt9-gamers-website/node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","/home/salman/APPS/Tasks/gsg-tt9-gamers-website/node_modules/@hookform/resolvers/src/toNestError.ts"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path] || {}, { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"],"mappings":";AASA,IAAMA,CAAA,GAAoB,SAAAC,CACxBC,CAAA,EACAF,CAAA,EACAG,CAAA;IAEA,IAAID,CAAA,IAAO,oBAAoBA,CAAA,EAAK;MAClC,IAAME,CAAA,GAAQC,CAAA,CAAIF,CAAA,EAAQH,CAAA;MAC1BE,CAAA,CAAID,iBAAA,CAAmBG,CAAA,IAASA,CAAA,CAAME,OAAA,IAAY,KAElDJ,CAAA,CAAIK,cAAA,EACL;IAAA;EACH;EAGaJ,CAAA,GAAyB,SAAAK,CACpCH,CAAA,EACAH,CAAA;IACQ,IAAAC,CAAA,YAAAA,EAAA;MAEN,IAAMC,CAAA,GAAQF,CAAA,CAAQO,MAAA,CAAON,CAAA;MACzBC,CAAA,IAASA,CAAA,CAAMM,GAAA,IAAO,oBAAoBN,CAAA,CAAMM,GAAA,GAClDV,CAAA,CAAkBI,CAAA,CAAMM,GAAA,EAAKP,CAAA,EAAWE,CAAA,IAC/BD,CAAA,CAAMO,IAAA,IACfP,CAAA,CAAMO,IAAA,CAAKC,OAAA,CAAQ,UAACV,CAAA;QAAqB,OACvCF,CAAA,CAAkBE,CAAA,EAAKC,CAAA,EAAWE,CAAA,CAAO;MAAA,EAG9C;IAAA;IATD,KAAK,IAAMD,CAAA,IAAaF,CAAA,CAAQO,MAAA,EAAMN,CAAA,CAAAC,CAAA,CAUxC;EAAA;EC3BaA,CAAA,GAAc,SAAAS,CACzBb,CAAA,EACAI,CAAA;IAEAA,CAAA,CAAQU,yBAAA,IAA6BX,CAAA,CAAuBH,CAAA,EAAQI,CAAA;IAEpE,IAAMW,CAAA,GAAc;IACpB,KAAK,IAAMC,CAAA,IAAQhB,CAAA,EAAQ;MACzB,IAAMiB,CAAA,GAAQZ,CAAA,CAAID,CAAA,CAAQK,MAAA,EAAQO,CAAA;MAElCd,CAAA,CACEa,CAAA,EACAC,CAAA,EACAE,MAAA,CAAOC,MAAA,CAAOnB,CAAA,CAAOgB,CAAA,KAAS,CAAE,GAAE;QAAEN,GAAA,EAAKO,CAAA,IAASA,CAAA,CAAMP;MAAA,GAE3D;IAAA;IAED,OAAOK,CACT;EAAA;AAAA,SAAAX,CAAA,IAAAS,WAAA,EAAAV,CAAA,IAAAK,sBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}